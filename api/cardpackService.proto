syntax = "proto3";

import "model.proto";

message CreateCardpackRequest {
  string user_id = 1;
  string cardpack_name = 2;
}

message CreateCardpackResponse {
  Cardpack cardpack = 1;
}

message GetCardpackRequest {
  string id = 1;
}

message GetCardpackResponse {
  Cardpack cardpack = 1;
}

message GetCardpacksRequest {
  string user_id = 1;
  int32 page_size = 2;
  string page_token = 3;
  int32 total_size = 4;
}

message GetCardpacksResponse {
  repeated Cardpack cardpacks = 1;
  string next_page_token = 2;
}

message EditCardpackRequest {
  string cardpack_id = 1;
  string name = 2;
}

message EditCardpackResponse {
  Cardpack cardpack = 1;
}

message DeleteCardpackRequest {
  string cardpack_id = 1;
}

message DeleteCardpackResponse {
}

message AddCardsToCardpackRequest {
  string cardpack_id = 1;
  repeated BlackCardCreationData black_cards = 2;
  repeated WhiteCardCreationData white_cards = 3;
}

message AddCardsToCardpackResponse {
  repeated BlackCard black_cards = 1;
  repeated WhiteCard white_cards = 2;
}

message DeleteCardsFromCardpackRequest {
  string cardpack_id = 1;
  repeated string black_card_ids = 2;
  repeated string white_card_ids = 3;
}

message DeleteCardsFromCardpackResponse {
}

message AddCardpackToFavoritesRequest {
  string user_id = 1;
  string cardpack_id = 2;
}

message AddCardpackToFavoritesResponse {
}

message RemoveCardpackFromFavoritesRequest {
  string user_id = 1;
  string cardpack_id = 2;
}

message RemoveCardpackFromFavoritesResponse {
}

message GetFavoritedCardpacksRequest {
  string user_id = 1;
  int32 page_size = 2;
  string page_token = 3;
  int32 total_size = 4;
}

message GetFavoritedCardpacksResponse {
  repeated Cardpack cardpacks = 1;
  string next_page_token = 2;
}

message GetIsCardpackFavoritedByUserRequest {
  string user_id = 1;
  string cardpack_id = 2;
}

message GetIsCardpackFavoritedByUserResponse {
  bool is_favorited = 1;
}

message GetBlackCardsRequest {
  string cardpack_id = 1;
  int32 page_size = 2;
  string page_token = 3;
  int32 total_size = 4;
}

message GetBlackCardsResponse {
  repeated BlackCard cards = 1;
  string next_page_token = 2;
}

message GetWhiteCardsRequest {
  string cardpack_id = 1;
  int32 page_size = 2;
  string page_token = 3;
  int32 total_size = 4;
}

message GetWhiteCardsResponse {
  repeated WhiteCard cards = 1;
  string next_page_token = 2;
}

message EditBlackCardRequest {
  string card_id = 1;
  string text = 2;
  int32 answer_fields = 3;
}

message EditBlackCardResponse {
  BlackCard card = 1;
}

message EditWhiteCardRequest {
  string card_id = 1;
  string text = 2;
}

message EditWhiteCardResponse {
  WhiteCard card = 1;
}

message SearchCardpacksRequest {
  string query = 1;
  int32 max_results = 2;
}

message SearchCardpacksResponse {
  repeated Cardpack cardpacks = 1;
}

message SearchCardpacksAutocompleteRequest {
  string query = 1;
  int32 max_results = 2;
}

message SearchCardpacksAutocompleteResponse {
  repeated string autocomplete_entry = 1;
}

service CardpackService {
  rpc CreateCardpack(CreateCardpackRequest) returns (CreateCardpackResponse);
  rpc GetCardpack(GetCardpackRequest) returns (GetCardpackResponse);
  rpc GetCardpacks(GetCardpacksRequest) returns (GetCardpacksResponse);
  rpc EditCardpack(EditCardpackRequest) returns (EditCardpackResponse);
  rpc DeleteCardpack(DeleteCardpackRequest) returns (DeleteCardpackResponse);
  rpc AddCardsToCardpack(AddCardsToCardpackRequest) returns (AddCardsToCardpackResponse);
  rpc DeleteCardsFromCardpack(DeleteCardsFromCardpackRequest) returns (DeleteCardsFromCardpackResponse);
  rpc AddCardpackToFavorites(AddCardpackToFavoritesRequest) returns (AddCardpackToFavoritesResponse);
  rpc RemoveCardpackFromFavorites(RemoveCardpackFromFavoritesRequest) returns (RemoveCardpackFromFavoritesResponse);
  rpc GetFavoritedCardpacks(GetFavoritedCardpacksRequest) returns (GetFavoritedCardpacksResponse);
  rpc GetIsCardpackFavoritedByUser(GetIsCardpackFavoritedByUserRequest) returns (GetIsCardpackFavoritedByUserResponse);
  rpc GetBlackCards(GetBlackCardsRequest) returns (GetBlackCardsResponse);
  rpc GetWhiteCards(GetWhiteCardsRequest) returns (GetWhiteCardsResponse);
  rpc EditBlackCard(EditBlackCardRequest) returns (EditBlackCardResponse);
  rpc EditWhiteCard(EditWhiteCardRequest) returns (EditWhiteCardResponse);
  rpc SearchCardpacks(SearchCardpacksRequest) returns (SearchCardpacksResponse);
  rpc SearchCardpacksAutocomplete(SearchCardpacksAutocompleteRequest) returns (SearchCardpacksAutocompleteResponse);
}