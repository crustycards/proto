syntax = "proto3";

import "model.proto";

message CreateCardpackRequest {
  string owner_id = 1; // The user id of whoever the cardpack should belong to.
  string cardpack_name = 2;
}

message GetCardpackRequest {
  string id = 1;
}

message ListCardpacksRequest {
  string owner_id = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message ListCardpacksResponse {
  repeated Cardpack cardpacks = 1;
  string next_page_token = 2;
  int64 total_size = 3;
}

message UpdateCardpackRequest {
  string cardpack_id = 1;
  string name = 2;
}

message DeleteCardpackRequest {
  string cardpack_id = 1;
}

message DeleteCardpackResponse {
}

message AddCardsToCardpackRequest {
  string cardpack_id = 1;
  repeated BlackCardCreationData black_cards = 2;
  repeated WhiteCardCreationData white_cards = 3;
}

message AddCardsToCardpackResponse {
  repeated BlackCard black_cards = 1;
  repeated WhiteCard white_cards = 2;
}

message DeleteCardsFromCardpackRequest {
  string cardpack_id = 1;
  repeated string black_card_ids = 2;
  repeated string white_card_ids = 3;
}

message DeleteCardsFromCardpackResponse {
}

message AddCardpackToFavoritesRequest {
  string user_id = 1;
  string cardpack_id = 2;
}

message AddCardpackToFavoritesResponse {
}

message RemoveCardpackFromFavoritesRequest {
  string user_id = 1;
  string cardpack_id = 2;
}

message RemoveCardpackFromFavoritesResponse {
}

message GetFavoritedCardpacksRequest {
  string user_id = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message GetFavoritedCardpacksResponse {
  repeated Cardpack cardpacks = 1;
  string next_page_token = 2;
  int64 total_size = 3;
}

message GetIsCardpackFavoritedByUserRequest {
  string user_id = 1;
  string cardpack_id = 2;
}

message GetIsCardpackFavoritedByUserResponse {
  bool is_favorited = 1;
}

message ListBlackCardsRequest {
  string cardpack_id = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message ListBlackCardsResponse {
  repeated BlackCard cards = 1;
  string next_page_token = 2;
  int64 total_size = 3;
}

message ListWhiteCardsRequest {
  string cardpack_id = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message ListWhiteCardsResponse {
  repeated WhiteCard cards = 1;
  string next_page_token = 2;
  int64 total_size = 3;
}

message UpdateBlackCardRequest {
  string card_id = 1;
  string text = 2;
  int32 answer_fields = 3;
}

message UpdateWhiteCardRequest {
  string card_id = 1;
  string text = 2;
}

message SearchCardpacksRequest {
  string query = 1;
  int32 max_results = 2;
}

message SearchCardpacksResponse {
  repeated Cardpack cardpacks = 1;
}

message SearchCardpacksAutocompleteRequest {
  string query = 1;
  int32 max_results = 2;
}

message SearchCardpacksAutocompleteResponse {
  repeated string autocomplete_entry = 1;
}

service CardpackService {
  rpc CreateCardpack(CreateCardpackRequest) returns (Cardpack);
  rpc GetCardpack(GetCardpackRequest) returns (Cardpack);
  rpc ListCardpacks(ListCardpacksRequest) returns (ListCardpacksResponse);
  rpc UpdateCardpack(UpdateCardpackRequest) returns (Cardpack);
  rpc DeleteCardpack(DeleteCardpackRequest) returns (DeleteCardpackResponse);
  rpc AddCardsToCardpack(AddCardsToCardpackRequest) returns (AddCardsToCardpackResponse);
  rpc DeleteCardsFromCardpack(DeleteCardsFromCardpackRequest) returns (DeleteCardsFromCardpackResponse);
  rpc AddCardpackToFavorites(AddCardpackToFavoritesRequest) returns (AddCardpackToFavoritesResponse);
  rpc RemoveCardpackFromFavorites(RemoveCardpackFromFavoritesRequest) returns (RemoveCardpackFromFavoritesResponse);
  rpc GetFavoritedCardpacks(GetFavoritedCardpacksRequest) returns (GetFavoritedCardpacksResponse);
  rpc GetIsCardpackFavoritedByUser(GetIsCardpackFavoritedByUserRequest) returns (GetIsCardpackFavoritedByUserResponse);
  rpc ListBlackCards(ListBlackCardsRequest) returns (ListBlackCardsResponse);
  rpc ListWhiteCards(ListWhiteCardsRequest) returns (ListWhiteCardsResponse);
  rpc UpdateBlackCard(UpdateBlackCardRequest) returns (BlackCard);
  rpc UpdateWhiteCard(UpdateWhiteCardRequest) returns (BlackCard);
  rpc SearchCardpacks(SearchCardpacksRequest) returns (SearchCardpacksResponse);
  rpc SearchCardpacksAutocomplete(SearchCardpacksAutocompleteRequest) returns (SearchCardpacksAutocompleteResponse);
}