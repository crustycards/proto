syntax = "proto3";

import "api/model.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

message CreateCardpackRequest {
  // The cardpack to create.
  Cardpack cardpack = 1;
}

message GetCardpackRequest {
  // The id of the cardpack to retrieve.
  string id = 1;
}

message ListCardpacksRequest {
  // Which entity to list cardpacks from.
  oneof list_by {
    // List cardpacks that belong to a user.
    string owner_id = 1;

    // List cardpacks that are liked by a user.
    string favoriter_id = 2;
  }

  // The maximum page size.
  // Response will never exceed
  // this length, but it may
  // return fewer results even
  // if the end has not been
  // reached.
  int32 page_size = 3;

  // A page token returned from a previous rpc.
  string page_token = 4;

  // Includes soft-deleted cardpacks if set to true.
  bool show_deleted = 5;
}

message ListCardpacksResponse {
  repeated Cardpack cardpacks = 1;
  string next_page_token = 2;
  int64 total_size = 3;
}

message UpdateCardpackRequest {
  // The cardpack to update.
  Cardpack cardpack = 1;

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteCardpackRequest {
  string cardpack_id = 1;
}

message UndeleteCardpackRequest {
  string cardpack_id = 1;
}

message CreateBlackCardRequest {
  // The card to create.
  BlackCard card = 1;
}

message CreateWhiteCardRequest {
  // The card to create.
  WhiteCard card = 1;
}

message DeleteBlackCardRequest {
  // The card to delete.
  string card_id = 1;
}

message DeleteWhiteCardRequest {
  // The card to delete.
  string card_id = 1;
}

message BatchCreateCardsRequest {
  // The id of the cardpack that
  // cards should be added to.
  // This must point to a valid cardpack.
  string cardpack_id = 1;

  // The black cards to create.
  repeated BlackCard black_cards = 2;

  // The white cards to create.
  repeated WhiteCard white_cards = 3;
}

message BatchCreateCardsResponse {
  repeated BlackCard black_cards = 1;
  repeated WhiteCard white_cards = 2;
}

message BatchDeleteCardsRequest {
  string cardpack_id = 1;
  repeated string black_card_ids = 2;
  repeated string white_card_ids = 3;
}

message AddCardpackToFavoritesRequest {
  string user_id = 1;
  string cardpack_id = 2;
}

message RemoveCardpackFromFavoritesRequest {
  string user_id = 1;
  string cardpack_id = 2;
}

message GetFavoritedCardpacksRequest {
  string user_id = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message GetFavoritedCardpacksResponse {
  repeated Cardpack cardpacks = 1;
  string next_page_token = 2;
  int64 total_size = 3;
}

message GetIsCardpackFavoritedByUserRequest {
  string user_id = 1;
  string cardpack_id = 2;
}

message GetIsCardpackFavoritedByUserResponse {
  bool is_favorited = 1;
}

message ListBlackCardsRequest {
  string cardpack_id = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message ListBlackCardsResponse {
  repeated BlackCard cards = 1;
  string next_page_token = 2;
  int64 total_size = 3;
}

message ListWhiteCardsRequest {
  string cardpack_id = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message ListWhiteCardsResponse {
  repeated WhiteCard cards = 1;
  string next_page_token = 2;
  int64 total_size = 3;
}

message UpdateBlackCardRequest {
  // The card to update.
  BlackCard card = 1;

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message UpdateWhiteCardRequest {
  // The card to update.
  WhiteCard card = 1;

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message SearchCardpacksRequest {
  string query = 1;
  int32 max_results = 2;
}

message SearchCardpacksResponse {
  repeated Cardpack cardpacks = 1;
}

message SearchCardpacksAutocompleteRequest {
  // The query to suggest results from.
  string query = 1;

  // The maximum number of suggestions to return.
  int32 max_results = 2;
}

message SearchCardpacksAutocompleteResponse {
  // List of autocomplete suggestions.
  // Each entry is guaranteed to contain
  // the original query.
  repeated string autocomplete_entry = 1;
}

service CardpackService {
  rpc CreateCardpack(CreateCardpackRequest) returns (Cardpack);
  rpc GetCardpack(GetCardpackRequest) returns (Cardpack);
  rpc ListCardpacks(ListCardpacksRequest) returns (ListCardpacksResponse);
  rpc UpdateCardpack(UpdateCardpackRequest) returns (Cardpack);
  rpc DeleteCardpack(DeleteCardpackRequest) returns (Cardpack);
  rpc UndeleteCardpack(UndeleteCardpackRequest) returns (Cardpack);
  rpc CreateBlackCard(CreateBlackCardRequest) returns (BlackCard);
  rpc CreateWhiteCard(CreateWhiteCardRequest) returns (WhiteCard);
  rpc DeleteBlackCard(DeleteBlackCardRequest) returns (google.protobuf.Empty);
  rpc DeleteWhiteCard(DeleteWhiteCardRequest) returns (google.protobuf.Empty);
  rpc BatchCreateCards(BatchCreateCardsRequest) returns (BatchCreateCardsResponse);
  rpc BatchDeleteCards(BatchDeleteCardsRequest) returns (google.protobuf.Empty);
  rpc AddCardpackToFavorites(AddCardpackToFavoritesRequest) returns (google.protobuf.Empty);
  rpc RemoveCardpackFromFavorites(RemoveCardpackFromFavoritesRequest) returns (google.protobuf.Empty);
  rpc GetFavoritedCardpacks(GetFavoritedCardpacksRequest) returns (GetFavoritedCardpacksResponse);
  rpc GetIsCardpackFavoritedByUser(GetIsCardpackFavoritedByUserRequest) returns (GetIsCardpackFavoritedByUserResponse);
  rpc ListBlackCards(ListBlackCardsRequest) returns (ListBlackCardsResponse);
  rpc ListWhiteCards(ListWhiteCardsRequest) returns (ListWhiteCardsResponse);
  rpc UpdateBlackCard(UpdateBlackCardRequest) returns (BlackCard);
  rpc UpdateWhiteCard(UpdateWhiteCardRequest) returns (WhiteCard);
  rpc SearchCardpacks(SearchCardpacksRequest) returns (SearchCardpacksResponse);
  rpc SearchCardpacksAutocomplete(SearchCardpacksAutocompleteRequest) returns (SearchCardpacksAutocompleteResponse);
}