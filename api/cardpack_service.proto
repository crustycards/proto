syntax = "proto3";

import "api/model.proto";
import "google/protobuf/field_mask.proto";

service CardpackService {
  rpc CreateCardpack (CreateCardpackRequest) returns (Cardpack);
  rpc GetCardpack (GetCardpackRequest) returns (Cardpack);
  rpc ListCardpacks (ListCardpacksRequest) returns (ListCardpacksResponse);
  rpc UpdateCardpack (UpdateCardpackRequest) returns (Cardpack);
  rpc DeleteCardpack (DeleteCardpackRequest) returns (Cardpack);
  rpc UndeleteCardpack (UndeleteCardpackRequest) returns (Cardpack);
  rpc LikeCardpack (LikeCardpackRequest) returns (Cardpack);
  rpc UnlikeCardpack (UnlikeCardpackRequest) returns (Cardpack);
  rpc GetIsCardpackLikedByUser (GetIsCardpackLikedByUserRequest) returns (GetIsCardpackLikedByUserResponse);
  rpc SearchCardpacks (SearchCardpacksRequest) returns (SearchCardpacksResponse);
  rpc SearchCardpacksAutocomplete (SearchCardpacksAutocompleteRequest) returns (SearchCardpacksAutocompleteResponse);
  rpc CreateBlackCard (CreateBlackCardRequest) returns (BlackCard);
  rpc CreateWhiteCard (CreateWhiteCardRequest) returns (WhiteCard);
  rpc UpdateBlackCard (UpdateBlackCardRequest) returns (BlackCard);
  rpc UpdateWhiteCard (UpdateWhiteCardRequest) returns (WhiteCard);
  rpc DeleteBlackCard (DeleteBlackCardRequest) returns (BlackCard);
  rpc DeleteWhiteCard (DeleteWhiteCardRequest) returns (WhiteCard);
  rpc UndeleteBlackCard (UndeleteBlackCardRequest) returns (BlackCard);
  rpc UndeleteWhiteCard (UndeleteWhiteCardRequest) returns (WhiteCard);
  rpc BatchCreateCards (BatchCreateCardsRequest) returns (BatchCreateCardsResponse);
  rpc BatchDeleteCards (BatchDeleteCardsRequest) returns (BatchDeleteCardsResponse);
  rpc BatchUndeleteCards (BatchUndeleteCardsRequest) returns (BatchUndeleteCardsResponse);
  rpc ListBlackCards (ListBlackCardsRequest) returns (ListBlackCardsResponse);
  rpc ListWhiteCards (ListWhiteCardsRequest) returns (ListWhiteCardsResponse);
}

message CreateCardpackRequest {
  // The cardpack to create.
  Cardpack cardpack = 1; // [(google.api.field_behavior) = REQUIRED].
}

message GetCardpackRequest {
  // The cardpack to retrieve.
  string cardpack_id = 1;
}

message ListCardpacksRequest {
  // Which entity to list cardpacks from.
  oneof list_by {
    // List cardpacks that belong to a user.
    string owner_id = 1;

    // List cardpacks that are liked by a user.
    string liker_id = 2;
  }

  // The order cardpacks are returned in.
  // Follows https://aip.dev/132#ordering.
  // Allowed values: "name", "like_count",
  // "create_time", "update_time", "delete_time".
  // Defaults to "create_time".
  string order_by = 3;

  // The maximum page size.
  int32 page_size = 4;

  // Optional page token returned from a previous rpc.
  string page_token = 5;

  // Show soft-deleted cardpacks instead.
  bool show_deleted = 6;
}

message ListCardpacksResponse {
  // The requested cardpacks.
  repeated Cardpack cardpacks = 1;

  // Opaque string. Can be passed to a subsequent
  // request to retrieve the next page of items.
  string next_page_token = 2;

  // The total number of items in the list specified in the request.
  int64 total_size = 3;
}

message UpdateCardpackRequest {
  // The cardpack to update.
  Cardpack cardpack = 1;

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteCardpackRequest {
  // The cardpack to delete.
  string cardpack_id = 1;
}

message UndeleteCardpackRequest {
  // The cardpack to undelete.
  // Deleted cardpacks are guaranteed to remain available to be undeleted for at least 30 days.
  string cardpack_id = 1;
}

message LikeCardpackRequest {
  // The user who liked the cardpack.
  string user_id = 1;

  // The cardpack they liked.
  string cardpack_id = 2;
}

message UnlikeCardpackRequest {
  // The user who unliked the cardpack.
  string user_id = 1;

  // The cardpack they unliked.
  string cardpack_id = 2;
}

message GetIsCardpackLikedByUserRequest {
  // The user to check.
  string user_id = 1;

  // The cardpack to check against.
  string cardpack_id = 2;
}

message GetIsCardpackLikedByUserResponse {
  // Whether the user has liked the cardpack.
  bool is_liked = 1;
}

message SearchCardpacksRequest {
  // The search query to suggest results from.
  string query = 1;

  // The maximum page size.
  int32 page_size = 2;
}

message SearchCardpacksResponse {
  // Search results.
  repeated Cardpack cardpacks = 1;
}

message SearchCardpacksAutocompleteRequest {
  // The search query to suggest results from.
  string query = 1;

  // The maximum number of suggestions to return.
  int32 page_size = 2;
}

message SearchCardpacksAutocompleteResponse {
  // List of autocomplete suggestions.
  // Each entry is guaranteed to contain
  // the original query.
  repeated string autocomplete_entry = 1;
}

message CreateBlackCardRequest {
  // The card to create.
  BlackCard black_card = 1; // [(google.api.field_behavior) = REQUIRED].
}

message CreateWhiteCardRequest {
  // The card to create.
  WhiteCard white_card = 1; // [(google.api.field_behavior) = REQUIRED].
}

message UpdateBlackCardRequest {
  // The card to update.
  BlackCard black_card = 1;

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message UpdateWhiteCardRequest {
  // The card to update.
  WhiteCard white_card = 1;

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteBlackCardRequest {
  // The card to delete.
  string black_card_id = 1;
}

message DeleteWhiteCardRequest {
  // The card to delete.
  string white_card_id = 1;
}

message UndeleteBlackCardRequest {
  // The card to undelete.
  // Deleted cards are guaranteed to remain available to be undeleted for at least 30 days.
  string card_id = 1;
}

message UndeleteWhiteCardRequest {
  // The card to undelete.
  // Deleted cards are guaranteed to remain available to be undeleted for at least 30 days.
  string card_id = 1;
}

// All black and white cards within a single request must have the same value for cardpack_id.
message BatchCreateCardsRequest {
  // The id of the cardpack that cards should be added to. Must point to a valid cardpack.
  string cardpack_id = 1;

  // The black cards to create.
  repeated BlackCard black_cards = 2;

  // The white cards to create.
  repeated WhiteCard white_cards = 3;
}

message BatchCreateCardsResponse {
  // The created black cards. Guaranteed to be in the same order as the request.
  repeated BlackCard black_cards = 1;

  // The created white cards. Guaranteed to be in the same order as the request.
  repeated WhiteCard white_cards = 2;
}

// All black and white cards within a single request must have the same value for cardpack_id.
message BatchDeleteCardsRequest {
  // The cardpack to delete cards from. The entire request will fail atomically if any black or
  // white cards specified do not belong to this cardpack.
  string cardpack_id = 1;

  // The black cards to delete.
  repeated string black_card_ids = 2;

  // The white cards to delete.
  repeated string white_card_ids = 3;
}

message BatchDeleteCardsResponse {
  // The deleted black cards. Guaranteed to be in the same order as the request.
  // Deleted cards are guaranteed to remain available to be undeleted for at least 30 days.
  repeated BlackCard black_cards = 1;

  // The deleted white cards. Guaranteed to be in the same order as the request.
  // Deleted cards are guaranteed to remain available to be undeleted for at least 30 days.
  repeated WhiteCard white_cards = 2;
}

// All black and white cards within a single request must have the same value for cardpack_id.
message BatchUndeleteCardsRequest {
  // The cardpack to undelete cards from. The entire request will fail atomically if any black or
  // white cards specified do not belong to this cardpack.
  string cardpack_id = 1;

  // The black cards to undelete.
  repeated string black_card_ids = 2;

  // The white cards to undelete.
  repeated string white_card_ids = 3;
}

message BatchUndeleteCardsResponse {
  // The undeleted black cards. Guaranteed to be in the same order as the request.
  // Deleted cards are guaranteed to remain available to be undeleted for at least 30 days.
  repeated BlackCard black_cards = 1;

  // The undeleted white cards. Guaranteed to be in the same order as the request.
  // Deleted cards are guaranteed to remain available to be undeleted for at least 30 days.
  repeated WhiteCard white_cards = 2;
}

message ListBlackCardsRequest {
  // The cardpack to list cards from.
  string cardpack_id = 1;

  // The order cards are returned in.
  // Follows https://aip.dev/132#ordering.
  // Allowed values: "text",
  // "create_time", "update_time", "delete_time".
  // Defaults to "create_time".
  string order_by = 2;

  // The maximum page size.
  int32 page_size = 3;

  // Optional page token returned from a previous rpc.
  string page_token = 4;

  // Show soft-deleted cards instead.
  bool show_deleted = 5;
}

message ListBlackCardsResponse {
  // The requested cards.
  repeated BlackCard cards = 1;

  // Opaque string. Can be passed to a subsequent
  // request to retrieve the next page of items.
  string next_page_token = 2;

  // The total number of items in the list specified in the request.
  int64 total_size = 3;
}

message ListWhiteCardsRequest {
  // The cardpack to list cards from.
  string cardpack_id = 1;

  // The order cards are returned in.
  // Follows https://aip.dev/132#ordering.
  // Allowed values: "text",
  // "create_time", "update_time", "delete_time".
  // Defaults to "create_time".
  string order_by = 2;

  // The maximum page size.
  int32 page_size = 3;

  // Optional page token returned from a previous rpc.
  string page_token = 4;

  // Show soft-deleted cards instead.
  bool show_deleted = 5;
}

message ListWhiteCardsResponse {
  // The requested cards.
  repeated WhiteCard cards = 1;

  // Opaque string. Can be passed to a subsequent
  // request to retrieve the next page of items.
  string next_page_token = 2;

  // The total number of items in the list specified in the request.
  int64 total_size = 3;
}