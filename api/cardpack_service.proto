syntax = "proto3";

import "api/model.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/field_mask.proto";

// Enables users to create cardpacks containing black and white cards.
//
// Resources:
// - Cardpack: Cardpacks are sets of cards that can be used in games
// - BlackCard: Belong to a cardpack and act like a black card from Cards Against Humanity
// - WhiteCard: Belong to a cardpack and act like a white card from Cards Against Humanity
//
// ( -- See resource proto documentation for more information. -- )
service CardpackService {
  // ( ---------------------- )
  // ( -- Standard Methods -- )
  // ( ---------------------- )

  // Creates a Cardpack.
  rpc CreateCardpack (CreateCardpackRequest) returns (Cardpack) {
    option (google.api.http) = {
      post: "/v1/{parent=users/*}/cardpacks"
      body: "cardpack"
    };
    option (google.api.method_signature) = "parent,cardpack";
  };

  // Returns a Cardpack.
  rpc GetCardpack (GetCardpackRequest) returns (Cardpack) {
    option (google.api.http) = {
      get: "/v1/{name=users/*/cardpacks/*}"
    };
    option (google.api.method_signature) = "name";
  };

  // Lists Cardpacks.
  rpc ListCardpacks (ListCardpacksRequest) returns (ListCardpacksResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=users/*}/cardpacks"
    };
    option (google.api.method_signature) = "parent";
    option (google.api.method_signature) = "parent,page_token";
    option (google.api.method_signature) = "parent,order_by,page_token";
    option (google.api.method_signature) = "parent,order_by,page_size,page_token,show_favorited,show_deleted";
  };

  // Updates a Cardpack.
  rpc UpdateCardpack (UpdateCardpackRequest) returns (Cardpack) {
    option (google.api.http) = {
      patch: "/v1/{cardpack.name=users/*/cardpacks/*}"
      body: "cardpack"
    };
    option (google.api.method_signature) = "cardpack,update_mask";
  };

  // Soft deletes a Cardpack. Deleted Cardpacks can be undeleted
  // for 30 days before they are permanently removed.
  // Deleted Cardpacks cannot be modified, they can only be
  // viewed and undeleted.
  rpc DeleteCardpack (DeleteCardpackRequest) returns (Cardpack) {
    option (google.api.http) = {
      delete: "/v1/{name=users/*/cardpacks/*}"
    };
    option (google.api.method_signature) = "name";
  };

  // Creates a BlackCard.
  rpc CreateBlackCard (CreateBlackCardRequest) returns (BlackCard) {
    option (google.api.http) = {
      post: "/v1/{parent=users/*/cardpacks/*}/blackCards"
      body: "black_card"
    };
    option (google.api.method_signature) = "parent,black_card";
  };

  // Creates a WhiteCard.
  rpc CreateWhiteCard (CreateWhiteCardRequest) returns (WhiteCard) {
    option (google.api.http) = {
      post: "/v1/{parent=users/*/cardpacks/*}/whiteCards"
      body: "white_card"
    };
    option (google.api.method_signature) = "parent,white_card";
  };

  // Lists BlackCards.
  rpc ListBlackCards (ListBlackCardsRequest) returns (ListBlackCardsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=users/*/cardpacks/*}/blackCards"
    };
    option (google.api.method_signature) = "parent";
    option (google.api.method_signature) = "parent,page_token";
    option (google.api.method_signature) = "parent,order_by,page_token";
    option (google.api.method_signature) = "parent,order_by,page_size,page_token,show_deleted";
  };

  // Lists WhiteCards.
  rpc ListWhiteCards (ListWhiteCardsRequest) returns (ListWhiteCardsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=users/*/cardpacks/*}/whiteCards"
    };
    option (google.api.method_signature) = "parent";
    option (google.api.method_signature) = "parent,page_token";
    option (google.api.method_signature) = "parent,order_by,page_token";
    option (google.api.method_signature) = "parent,order_by,page_size,page_token,show_deleted";
  };

  // Updates a BlackCard.
  rpc UpdateBlackCard (UpdateBlackCardRequest) returns (BlackCard) {
    option (google.api.http) = {
      patch: "/v1/{black_card.name=users/*/cardpacks/*/blackCards/*}"
      body: "black_card"
    };
    option (google.api.method_signature) = "black_card,update_mask";
  };

  // Updates a WhiteCard.
  rpc UpdateWhiteCard (UpdateWhiteCardRequest) returns (WhiteCard) {
    option (google.api.http) = {
      patch: "/v1/{white_card.name=users/*/cardpacks/*/whiteCards/*}"
      body: "white_card"
    };
    option (google.api.method_signature) = "white_card,update_mask";
  };

  // Soft deletes a BlackCard. Deleted BlackCards can be undeleted
  // for 30 days before they are permanently removed.
  // Deleted BlackCards cannot be modified, they can only be
  // viewed and undeleted.
  rpc DeleteBlackCard (DeleteBlackCardRequest) returns (BlackCard) {
    option (google.api.http) = {
      delete: "/v1/{name=users/*/cardpacks/*/blackCards/*}"
    };
    option (google.api.method_signature) = "name";
  };

  // Soft deletes a WhiteCard. Deleted WhiteCards can be undeleted
  // for 30 days before they are permanently removed.
  // Deleted WhiteCards cannot be modified, they can only be
  // viewed and undeleted.
  rpc DeleteWhiteCard (DeleteWhiteCardRequest) returns (WhiteCard) {
    option (google.api.http) = {
      delete: "/v1/{name=users/*/cardpacks/*/whiteCards/*}"
    };
    option (google.api.method_signature) = "name";
  };

  // Creates a batch of BlackCards.
  // This operation is atomic. Partial writes are not supported.
  rpc BatchCreateBlackCards (BatchCreateBlackCardsRequest) returns (BatchCreateBlackCardsResponse) {
    option (google.api.http) = {
      post: "/v1/{parent=users/*/cardpacks/*}/blackCards:batchCreate"
      body: "*"
    };
  };

  // Creates a batch of WhiteCards.
  // This operation is atomic. Partial writes are not supported.
  rpc BatchCreateWhiteCards (BatchCreateWhiteCardsRequest) returns (BatchCreateWhiteCardsResponse) {
    option (google.api.http) = {
      post: "/v1/{parent=users/*/cardpacks/*}/whiteCards:batchCreate"
      body: "*"
    };
  };

  // Soft deletes a batch of BlackCards. Deleted BlackCards can be
  // undeleted for 30 days before they are permanently removed.
  // This operation is atomic. Partial writes are not supported.
  rpc BatchDeleteBlackCards (BatchDeleteBlackCardsRequest) returns (BatchDeleteBlackCardsResponse) {
    option (google.api.http) = {
      post: "/v1/{parent=users/*/cardpacks/*}/blackCards:batchDelete"
      body: "*"
    };
  };

  // Soft deletes a batch of WhiteCards. Deleted WhiteCards can be
  // undeleted for 30 days before they are permanently removed.
  // This operation is atomic. Partial writes are not supported.
  rpc BatchDeleteWhiteCards (BatchDeleteWhiteCardsRequest) returns (BatchDeleteWhiteCardsResponse) {
    option (google.api.http) = {
      post: "/v1/{parent=users/*/cardpacks/*}/whiteCards:batchDelete"
      body: "*"
    };
  };

  // ( -------------------- )
  // ( -- Custom Methods -- )
  // ( -------------------- )

  // Undeletes a Cardpack, returning it to its previous state.
  // Deleted Cardpacks can be undeleted for 30 days before they
  // are permanently removed. To view deleted Cardpacks, use
  // the ListCardpacks rpc with `show_deleted` set to true.
  rpc UndeleteCardpack (UndeleteCardpackRequest) returns (Cardpack);

  // Undeletes a BlackCard, returning it to its previous state.
  // Deleted BlackCards can be undeleted for 30 days before they
  // are permanently removed. To view deleted BlackCards, use
  // the ListBlackCards rpc with `show_deleted` set to true.
  rpc UndeleteBlackCard (UndeleteBlackCardRequest) returns (BlackCard);

  // Undeletes a WhiteCard, returning it to its previous state.
  // Deleted WhiteCards can be undeleted for 30 days before they
  // are permanently removed. To view deleted WhiteCards, use
  // the ListWhiteCards rpc with `show_deleted` set to true.
  rpc UndeleteWhiteCard (UndeleteWhiteCardRequest) returns (WhiteCard);

  // Adds Cardpack to a User's favorites list.
  // To view favorited cardpacks, use the ListCardpacks
  // rpc with `list_favorited` set to true.
  rpc LikeCardpack (LikeCardpackRequest) returns (Cardpack);

  // Removes Cardpack from a User's favorites list.
  // To view favorited cardpacks, use the ListCardpacks
  // rpc with `list_favorited` set to true.
  rpc UnlikeCardpack (UnlikeCardpackRequest) returns (Cardpack);

  // Returns whether a User has added a Cardpack to their favorites.
  rpc CheckDoesUserLikeCardpack (CheckDoesUserLikeCardpackRequest) returns (CheckDoesUserLikeCardpackResponse);

  // Fetches multiple Cardpacks based off search query.
  rpc CardpackSearch (CardpackSearchRequest) returns (CardpackSearchResponse);

  // Fetches search suggestions that are used to provide autocomplete functionality.
  rpc AutocompleteCardpackSearch (AutocompleteCardpackSearchRequest) returns (AutocompleteCardpackSearchResponse);
}

// Request message for CreateCardpack.
message CreateCardpackRequest {
  // The parent user.
  // Format: users/{user}
  string parent = 1 [(google.api.field_behavior) = REQUIRED, (google.api.resource_reference) = {child_type: "api.crusty.cards/Cardpack"}];

  // The cardpack to create.
  Cardpack cardpack = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request message for GetCardpack.
message GetCardpackRequest {
  // The name of the cardpack to retrieve.
  // Format: users/{user}/cardpacks/{cardpack}
  string name = 1 [(google.api.field_behavior) = REQUIRED, (google.api.resource_reference) = {type: "api.crusty.cards/Cardpack"}];
}

// Request message for ListCardpacks.
message ListCardpacksRequest {
  // The parent user.
  // Format: users/{user}
  string parent = 1 [(google.api.field_behavior) = REQUIRED, (google.api.resource_reference) = {child_type: "api.crusty.cards/Cardpack"}];

  // Comma separated list of fields to order by, followed by
  // `asc` or `desc` postfix. This list is case-insensitive.
  // Default sorting order is ascending, redundant whitespace
  // is ignored.
  //
  // Supported fields are:
  // `display_name`, `create_time`, `update_time`, `delete_time`, `like_count`
  //
  // Sorts by `create_time` by default.
  string order_by = 2 [(google.api.field_behavior) = OPTIONAL];

  // The maximum page size.
  // If unspecified, at most 50 items will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  // If negative value is specified, no items will be returned. This is
  // useful if you only want the total size of the collection.
  int32 page_size = 3 [(google.api.field_behavior) = OPTIONAL];

  // Page token returned from a previous rpc.
  string page_token = 4 [(google.api.field_behavior) = OPTIONAL];

  // When enabled, lists cardpacks that the parent
  // has favorited instead of ones that they own.
  bool show_favorited = 5 [(google.api.field_behavior) = OPTIONAL];

  // Show soft-deleted cardpacks instead.
  bool show_deleted = 6 [(google.api.field_behavior) = OPTIONAL];
}

// Response message for ListCardpacks.
message ListCardpacksResponse {
  // The requested cardpacks.
  repeated Cardpack cardpacks = 1;

  // Opaque string. Can be passed to a subsequent
  // request to retrieve the next page of items.
  string next_page_token = 2;

  // The total number of items in the list specified in the request.
  int64 total_size = 3;
}

// Request message for UpdateCardpack.
message UpdateCardpackRequest {
  // The cardpack to update.
  Cardpack cardpack = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request message for DeleteCardpack.
message DeleteCardpackRequest {
  // The name of the cardpack to delete.
  // Deleted cardpacks are guaranteed to remain available to be undeleted for at least 30 days.
  // Format: users/{user}/cardpacks/{cardpack}
  string name = 1 [(google.api.field_behavior) = REQUIRED, (google.api.resource_reference) = {type: "api.crusty.cards/Cardpack"}];
}

// Request message for CreateBlackCard.
message CreateBlackCardRequest {
  // The parent cardpack.
  // Format: users/{user}/cardpacks/{cardpack}
  string parent = 1 [(google.api.field_behavior) = REQUIRED, (google.api.resource_reference) = {child_type: "api.crusty.cards/BlackCard"}];

  // The black card to create.
  BlackCard black_card = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request message for CreateWhiteCard.
message CreateWhiteCardRequest {
  // The parent cardpack.
  // Format: users/{user}/cardpacks/{cardpack}
  string parent = 1 [(google.api.field_behavior) = REQUIRED, (google.api.resource_reference) = {child_type: "api.crusty.cards/WhiteCard"}];

  // The white card to create.
  WhiteCard white_card = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request message for ListBlackCards.
message ListBlackCardsRequest {
  // The parent cardpack.
  // Format: users/{user}/cardpacks/{cardpack}
  string parent = 1 [(google.api.field_behavior) = REQUIRED, (google.api.resource_reference) = {child_type: "api.crusty.cards/BlackCard"}];

  // Comma separated list of fields to order by, followed by
  // `asc` or `desc` postfix. This list is case-insensitive.
  // Default sorting order is ascending, redundant whitespace
  // is ignored.
  //
  // Supported fields are:
  // `text`, `create_time`, `update_time`, `delete_time`
  //
  // Sorts by `create_time` by default.
  string order_by = 2 [(google.api.field_behavior) = OPTIONAL];

  // The maximum page size.
  // If unspecified, at most 50 items will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  // If negative value is specified, no items will be returned. This is
  // useful if you only want the total size of the collection.
  int32 page_size = 3 [(google.api.field_behavior) = OPTIONAL];

  // Page token returned from a previous rpc.
  string page_token = 4 [(google.api.field_behavior) = OPTIONAL];

  // Show soft-deleted cards instead.
  bool show_deleted = 5 [(google.api.field_behavior) = OPTIONAL];
}

// Response message for ListBlackCards.
message ListBlackCardsResponse {
  // The requested cards.
  repeated BlackCard black_cards = 1;

  // Opaque string. Can be passed to a subsequent
  // request to retrieve the next page of items.
  string next_page_token = 2;

  // The total number of items in the list specified in the request.
  int64 total_size = 3;
}

// Request message for ListWhiteCards.
message ListWhiteCardsRequest {
  // The parent cardpack.
  // Format: users/{user}/cardpacks/{cardpack}
  string parent = 1 [(google.api.field_behavior) = REQUIRED, (google.api.resource_reference) = {child_type: "api.crusty.cards/WhiteCard"}];

  // Comma separated list of fields to order by, followed by
  // `asc` or `desc` postfix. This list is case-insensitive.
  // Default sorting order is ascending, redundant whitespace
  // is ignored.
  //
  // Supported fields are:
  // `text`, `create_time`, `update_time`, `delete_time`
  //
  // Sorts by `create_time` by default.
  string order_by = 2 [(google.api.field_behavior) = OPTIONAL];

  // The maximum page size.
  // If unspecified, at most 50 items will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  // If negative value is specified, no items will be returned. This is
  // useful if you only want the total size of the collection.
  int32 page_size = 3 [(google.api.field_behavior) = OPTIONAL];

  // Page token returned from a previous rpc.
  string page_token = 4 [(google.api.field_behavior) = OPTIONAL];

  // Show soft-deleted cards instead.
  bool show_deleted = 5 [(google.api.field_behavior) = OPTIONAL];
}

// Response message for ListWhiteCards.
message ListWhiteCardsResponse {
  // The requested cards.
  repeated WhiteCard white_cards = 1;

  // Opaque string. Can be passed to a subsequent
  // request to retrieve the next page of items.
  string next_page_token = 2;

  // The total number of items in the list specified in the request.
  int64 total_size = 3;
}

// Request message for UpdateBlackCard.
message UpdateBlackCardRequest {
  // The card to update.
  BlackCard black_card = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request message for UpdateWhiteCard.
message UpdateWhiteCardRequest {
  // The card to update.
  WhiteCard white_card = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request message for DeleteBlackCard.
message DeleteBlackCardRequest {
  // The name of the black card to delete.
  // Deleted black cards are guaranteed to remain available to be undeleted for at least 30 days.
  // Format: users/{user}/cardpacks/{cardpack}/blackCards/{black_card}
  string name = 1 [(google.api.field_behavior) = REQUIRED, (google.api.resource_reference) = {type: "api.crusty.cards/BlackCard"}];
}

// Request message for DeleteWhiteCard.
message DeleteWhiteCardRequest {
  // The name of the white card to delete.
  // Deleted white cards are guaranteed to remain available to be undeleted for at least 30 days.
  // Format: users/{user}/cardpacks/{cardpack}/whiteCards/{white_card}
  string name = 1 [(google.api.field_behavior) = REQUIRED, (google.api.resource_reference) = {type: "api.crusty.cards/WhiteCard"}];
}

// Request message for BatchCreateBlackCards.
message BatchCreateBlackCardsRequest {
  // The parent resource shared by all cards being created.
  // Format: users/{user}/cardpacks/{cardpack}
  // If this is set, the parent field in the CreateBlackCardRequest
  // messages must either be empty or match this field.
  string parent = 1;

  // The request message specifying the resources to create.
  // A maximum of 10000 cards can be created in a batch.
  repeated CreateBlackCardRequest requests = 2;
}

// Response message for BatchCreateBlackCards.
message BatchCreateBlackCardsResponse {
  // Black cards created. Guaranteed to be in the same order as the request.
  repeated BlackCard black_cards = 1;
}

// Request message for BatchCreateWhiteCards.
message BatchCreateWhiteCardsRequest {
  // The parent resource shared by all cards being created.
  // Format: users/{user}/cardpacks/{cardpack}
  // If this is set, the parent field in the CreateWhiteCardRequest
  // messages must either be empty or match this field.
  string parent = 1;

  // The request message specifying the resources to create.
  // A maximum of 10000 cards can be created in a batch.
  repeated CreateWhiteCardRequest requests = 2;
}

// Response message for BatchCreateWhiteCards.
message BatchCreateWhiteCardsResponse {
  // White cards created. Guaranteed to be in the same order as the request.
  repeated WhiteCard white_cards = 1;
}

// Request message for BatchDeleteBlackCards.
message BatchDeleteBlackCardsRequest {
  // The parent resource shared by all cards being deleted.
  // Format: users/{user}/cardpacks/{cardpack}
  // If this is set, the parent of all of the cards
  // specified in `names` must match this field.
  string parent = 1;

  // The names of the cards to delete.
  // A maximum of 10000 cards can be deleted in a batch.
  // Format: users/{user}/cardpacks/{cardpack}/blackCards/{black_card}
  repeated string names = 2;
}

// Response message for BatchDeleteBlackCards.
message BatchDeleteBlackCardsResponse {
  // BlackCards deleted. Guaranteed to be in the same order as the request.
  // Deleted cards are guaranteed to remain available to be undeleted for at least 30 days.
  repeated BlackCard cards = 1;
}

// Request message for BatchDeleteWhiteCards.
message BatchDeleteWhiteCardsRequest {
  // The parent resource shared by all cards being deleted.
  // Format: users/{user}/cardpacks/{cardpack}
  // If this is set, the parent of all of the cards
  // specified in `names` must match this field.
  string parent = 1;

  // The names of the cards to delete.
  // A maximum of 10000 cards can be deleted in a batch.
  // Format: users/{user}/cardpacks/{cardpack}/whiteCards/{white_card}
  repeated string names = 2;
}

// Response message for BatchDeleteWhiteCards.
message BatchDeleteWhiteCardsResponse {
  // WhiteCards deleted. Guaranteed to be in the same order as the request.
  // Deleted cards are guaranteed to remain available to be undeleted for at least 30 days.
  repeated WhiteCard cards = 1;
}

// Request message for UndeleteCardpack.
message UndeleteCardpackRequest {
  // The name of the cardpack to undelete.
  // Deleted cardpacks are guaranteed to remain available to be undeleted for at least 30 days.
  // Format: users/{user}/cardpacks/{cardpack}
  string name = 1 [(google.api.field_behavior) = REQUIRED, (google.api.resource_reference) = {type: "api.crusty.cards/Cardpack"}];
}

// Request message for UndeleteBlackCard.
message UndeleteBlackCardRequest {
  // The name of the black card to undelete.
  // Deleted black cards are guaranteed to remain available to be undeleted for at least 30 days.
  // Format: users/{user}/cardpacks/{cardpack}/blackCards/{black_card}
  string name = 1 [(google.api.field_behavior) = REQUIRED, (google.api.resource_reference) = {type: "api.crusty.cards/BlackCard"}];
}

// Request message for UndeleteWhiteCard.
message UndeleteWhiteCardRequest {
  // The name of the white card to undelete.
  // Deleted white cards are guaranteed to remain available to be undeleted for at least 30 days.
  // Format: users/{user}/cardpacks/{cardpack}/whiteCards/{white_card}
  string name = 1 [(google.api.field_behavior) = REQUIRED, (google.api.resource_reference) = {type: "api.crusty.cards/WhiteCard"}];
}

// Request message for LikeCardpack.
message LikeCardpackRequest {
  // The user who liked the cardpack.
  string user_name = 1;

  // The cardpack they liked.
  string cardpack_name = 2;
}

// Request message for UnlikeCardpack.
message UnlikeCardpackRequest {
  // The user who unliked the cardpack.
  string user_name = 1;

  // The cardpack they unliked.
  string cardpack_name = 2;
}

// Request message for CheckDoesUserLikeCardpack.
message CheckDoesUserLikeCardpackRequest {
  // The user to check.
  string user_name = 1 [(google.api.field_behavior) = REQUIRED];

  // The cardpack to check against.
  string cardpack_name = 2 [(google.api.field_behavior) = REQUIRED];
}

// Response message for CheckDoesUserLikeCardpack.
message CheckDoesUserLikeCardpackResponse {
  // Whether the user has liked the cardpack.
  bool is_liked = 1;
}

// Request message for CardpackSearch.
message CardpackSearchRequest {
  // The search query to suggest results from.
  string query = 1 [(google.api.field_behavior) = REQUIRED];

  // The maximum page size.
  // If unspecified, at most 50 items will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  // If negative value is specified, no items will be returned. This is
  // useful if you only want the total size of the collection.
  int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];

  // Page token returned from a previous rpc.
  string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Response message for CardpackSearch.
message CardpackSearchResponse {
  // Search results.
  repeated Cardpack cardpacks = 1;

  // Opaque string. Can be passed to a subsequent
  // request to retrieve the next page of items.
  string next_page_token = 2;

  // The total number of items in the list specified in the request.
  int64 total_size = 3;
}

// Request message for AutocompleteCardpackSearch.
message AutocompleteCardpackSearchRequest {
  // The search query to suggest results from.
  string query = 1 [(google.api.field_behavior) = REQUIRED];

  // The maximum page size.
  // If unspecified, at most 50 items will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  // If negative value is specified, no items will be returned. This is
  // useful if you only want the total size of the collection.
  int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];

  // Page token returned from a previous rpc.
  string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Response message for AutocompleteCardpackSearch.
message AutocompleteCardpackSearchResponse {
  // List of autocomplete suggestions.
  // Each entry is guaranteed to contain
  // the original query.
  repeated string autocomplete_entries = 1;

  // Opaque string. Can be passed to a subsequent
  // request to retrieve the next page of items.
  string next_page_token = 2;

  // The total number of items in the list specified in the request.
  int64 total_size = 3;
}