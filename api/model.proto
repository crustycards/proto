syntax = "proto3";

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/timestamp.proto";

// Top-level resource representing a user.
message User {
  option (google.api.resource) = {
    type: "api.crusty.cards/User"
    pattern: "users/{user}"
  };

  // The resource name of the user.
  string name = 1 [(google.api.field_behavior) = IMMUTABLE];

  // The display name of the user.
  string display_name = 2;

  // When the user was created.
  google.protobuf.Timestamp create_time = 3 [(google.api.field_behavior) = OUTPUT_ONLY, (google.api.field_behavior) = IMMUTABLE];

  // When the user was last modified.
  google.protobuf.Timestamp update_time = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Singleton resource belonging to a user.
// Contains bytes representing an image.
message UserProfileImage {
  option (google.api.resource) = {
    type: "api.crusty.cards/UserProfileImage"
    pattern: "users/{user}/profileImage"
  };

  // The resource name of the user profile image.
  string name = 1 [(google.api.field_behavior) = IMMUTABLE];

  // Image data. Empty by default for new users.
  bytes image_data = 2;
}

// Configuration settings used to create a game.
message GameConfig {
  // The displayed name of the game.
  // Does not have to be unique among all
  // games since each game has a unique game_id.
  string display_name = 1;

  // The maximum number of players that can be in the game at once.
  // Artificial players do not count towards this limit.
  // Value must be at least 3 and at most 100.
  int32 max_players = 2;

  // The condition through which
  // a game will automatically end.
  oneof end_condition {
    // Once a player reaches this score, the game
    // is stopped automatically and that player is
    // marked as the winner.
    int32 max_score = 3;

    // The game never ends automatically.
    // Scores are still tracked.
    bool endless_mode = 4;
  }

  // The hand limit of each player.
  int32 hand_size = 5;

  // A list of cardpacks that should be used when making the game.
  // All cards from all cardpacks listed will be pulled from
  // the main api at game creation.
  repeated string cardpack_names = 6;

  // Settings defining how blank cards behave in-game.
  message BlankCardConfig {
    // How blank cards can be used.
    enum Behavior {
      // Default value. This value is unused.
      BEHAVIOR_UNSPECIFIED = 0;

      // No blank cards are added to the deck.
      DISABLED = 1;

      // Allow users to play blank cards from their hand
      // and write any text (limited to 100 characters).
      OPEN_TEXT = 2;

      // At any time, a user can choose to trade in a blank card. Whenever
      // they do, five cards are drawn from the deck and displayed to the user.
      // The user can pick any one of them and it is added to their hand.
      RANDOM_CHOICE = 3;
    }

    // Specifies behavior of blank cards.
    Behavior behavior = 1;

    oneof blank_cards_added {
      // Adds a fixed number of blank cards to the deck.
      int32 card_count = 2;

      // A number between 0.0 and 0.8 specifying what percentage of the total
      // deck size should be blank cards. For example, if there are 900
      // non-blank cards in your game and you specify a blank card percentage
      // of 0.1, there will be 100 blank cards added for a total of 1000.
      //
      // The upper limit is 0.8 because, as this value approaches 1.0, the
      // number of blank cards needed increases exponentially. A value of 0.5
      // doubles the size of the deck, a value of 0.8 increases the size by 5x
      // and a value of 0.99 would increase it by 100x.
      double percentage = 3;
    }
  }

  // Defines how blank cards behave in-game
  // and how many should be added to the deck.
  BlankCardConfig blank_card_config = 7;
}

// Singleton resource belonging to a user. Contains user-specific settings.
// Exactly one exists for every user, and are created automatically whenever a user is created.
// All values are unset for new users and can only be changed by calling UpdateUserSettings.
message UserSettings {
  option (google.api.resource) = {
    type: "api.crusty.cards/UserSettings"
    pattern: "users/{user}/settings"
  };

  // The resource name of the user settings.
  string name = 1 [(google.api.field_behavior) = IMMUTABLE];

  // Color schemes the frontend supports.
  enum ColorScheme {
    // Default value. This value is unused.
    COLOR_SCHEME_UNSPECIFIED = 0;

    // Default color scheme for new users.
    DEFAULT_LIGHT = 1;

    // Dark mode.
    DEFAULT_DARK = 2;
  }

  // The color scheme to show for the user.
  ColorScheme color_scheme = 2;

  // Default game settings for a user to quickly start a game.
  GameConfig quick_start_game_config = 3;
}

// Resource belonging to a user. Represents a collection
// of related cards that can be used when creating games.
message Cardpack {
  option (google.api.resource) = {
    type: "api.crusty.cards/Cardpack"
    pattern: "users/{user}/cardpacks/{cardpack}"
  };

  // The resource name of the cardpack.
  string name = 1 [(google.api.field_behavior) = IMMUTABLE];

  // The display name of the cardpack.
  string display_name = 2;

  // When the cardpack was created.
  google.protobuf.Timestamp create_time = 3 [(google.api.field_behavior) = OUTPUT_ONLY, (google.api.field_behavior) = IMMUTABLE];

  // This field is reset anytime any changes are made to the cardpack including adding, modifying
  // and deleting cards as well as renaming the cardpack.
  google.protobuf.Timestamp update_time = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // If this field is not empty, it indicates that the cardpack has been deleted. Cardpacks that
  // have been deleted are guaranteed to remain available to be undeleted for at least 30 days.
  google.protobuf.Timestamp delete_time = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // How many other users liked this cardpack.
  int64 like_count = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// A black card. Behaves like a black card in Cards Against Humanity.
// Belongs to a cardpack.
message BlackCard {
  option (google.api.resource) = {
    type: "api.crusty.cards/BlackCard"
    pattern: "users/{user}/cardpacks/{cardpack}/blackCards/{black_card}"
  };

  // The resource name of the card.
  string name = 1 [(google.api.field_behavior) = IMMUTABLE];

  // The content of the card. Limited to 300 characters.
  string text = 2;

  // The number of white cards that should be played when this card is used.
  // Value must be 1, 2, or 3.
  int32 answer_fields = 3;

  // When the card was created.
  google.protobuf.Timestamp create_time = 4 [(google.api.field_behavior) = OUTPUT_ONLY, (google.api.field_behavior) = IMMUTABLE];

  // When the card was last modified.
  google.protobuf.Timestamp update_time = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // If this field is not empty, it indicates that the card has been deleted. Cards that
  // have been deleted are guaranteed to remain available to be undeleted for at least 30 days.
  google.protobuf.Timestamp delete_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// A white card. Behaves like a white card in Cards Against Humanity.
// Belongs to a cardpack.
message WhiteCard {
  option (google.api.resource) = {
    type: "api.crusty.cards/WhiteCard"
    pattern: "users/{user}/cardpacks/{cardpack}/whiteCards/{white_card}"
  };

  // The resource name of the card.
  string name = 1 [(google.api.field_behavior) = IMMUTABLE];

  // The content of the card. Limited to 100 characters.
  string text = 2;

  // When the card was created.
  google.protobuf.Timestamp create_time = 3 [(google.api.field_behavior) = OUTPUT_ONLY, (google.api.field_behavior) = IMMUTABLE];

  // When the card was last modified.
  google.protobuf.Timestamp update_time = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // If this field is not empty, it indicates that the card has been deleted. Cards that
  // have been deleted are guaranteed to remain available to be undeleted for at least 30 days.
  google.protobuf.Timestamp delete_time = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
}