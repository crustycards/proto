syntax = "proto3";

import "google/protobuf/timestamp.proto";

message User {
  // An opaque id unique to each user.
  // These are generated by the
  // server, never set by an api caller.
  string id = 1;

  // The display name of the user.
  // Can be updated at any time
  // and does not have to be unique.
  string name = 2;

  // When the user was created.
  // This happens the first time
  // an OAuth user signs in.
  google.protobuf.Timestamp create_time = 3;
}

// Settings used to create a game.
message GameSettings {
  // The displayed name of the game.
  // Does not have to be unique among all
  // games since each game has a unique game_id.
  string game_name = 2;

  // The maximum number of players that can be in the game at once.
  // Artificial players do not count towards this limit.
  // Value must be at least 3 and at most 100.
  int32 max_players = 3;

  // The condition through which
  // a game will automatically end.
  oneof end_condition {
    // Once a player reaches this score, the game
    // is stopped automatically and that player is
    // marked as the winner.
    int32 max_score = 4;

    // The game never ends automatically.
    // Scores are still tracked.
    bool endless_mode = 5;
  }

  int32 hand_size = 6;

  // A list of cardpacks that should be used when making the game.
  // All cards from all cardpacks listed will be pulled from
  // the main api at game creation.
  repeated string cardpack_ids = 7;
}

message UserSettings {
  enum ColorScheme {
    DEFAULT_LIGHT = 0;
    DEFAULT_DARK = 1;
  }
  ColorScheme color_scheme = 1;
  GameSettings quick_start_settings = 2;
}

message Cardpack {
  // An opaque id unique to each cardpack.
  // These are always generated by the
  // server. A specified value when creating
  // a cardpack is ignored.
  //
  // Required when updating to indicate which
  // cardpack should be updated.
  string id = 1;

  // The display name of the cardpack.
  // Required when creating.
  // Allowed when updating.
  string name = 2;

  // The owner of the cardpack.
  // This user has full access to add, modify, or delete any cards in the pack.
  //
  // When creating the cardpack, only the user_id field is required and all other fields are
  // ignored.
  //
  // Not allowed when updating.
  User owner = 3;

  // When the cardpack was created.
  //
  // Ignored when creating or updating the cardpack since this is set automatically.
  google.protobuf.Timestamp create_time = 4;

  // This field is reset anytime any changes are made to the cardpack including adding, modifying
  // and deleting cards as well as renaming the cardpack.
  //
  // Ignored when creating or updating the cardpack since this is set and updated automatically.
  google.protobuf.Timestamp update_time = 5;

  // If this field is not empty, it indicates that the cardpack has been deleted. Cardpacks that
  // have been deleted are guaranteed to remain available to be undeleted for at least 30 days.
  //
  // Ignored when creating or updating the cardpack since this is set and updated automatically.
  google.protobuf.Timestamp delete_time = 6;

  // How many other users have added
  // the cardpack to their favorites.
  //
  // Ignored when creating or updating the cardpack since this is set and updated automatically.
  int64 like_count = 7;
}

message BlackCard {
  // This id is unique among all black cards (from all cardpacks).
  // These are always generated by the
  // server. A specified value when creating
  // a card is ignored.
  //
  // Required when updating to indicate which
  // card should be updated.
  string id = 1;

  // The contents of the card.
  // Required when creating.
  // Allowed when updating.
  string text = 2;

  // The number of white cards that should be played when this card is used.
  // Required when creating.
  // Allowed when updating.
  int32 answer_fields = 3;

  // The cardpack this card belongs to.
  // Required when creating.
  // Not allowed when updating.
  string cardpack_id = 4; // TODO - Possibly rename to parent_id.
}

message WhiteCard {
  // This id is unique among all white cards (from all cardpacks).
  // These are always generated by the
  // server. A specified value when creating
  // a card is ignored.
  //
  // Required when updating to indicate which
  // card should be updated.
  string id = 1;

  // The contents of the card.
  // Required when creating.
  // Allowed when updating.
  string text = 2;

  // The cardpack this card belongs to.
  // Required when creating.
  // Not allowed when updating.
  string cardpack_id = 3; // TODO - Possibly rename to parent_id.
}