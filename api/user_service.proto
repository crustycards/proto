syntax = "proto3";

import "api/model.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

service UserService {
  rpc GetOrCreateUser(GetOrCreateUserRequest) returns (User);
  rpc GetUser(GetUserRequest) returns (User);
  rpc UpdateUser(UpdateUserRequest) returns (User);
  rpc GetUserSettings(GetUserSettingsRequest) returns (UserSettings);
  rpc UpdateUserSettings(UpdateUserSettingsRequest) returns (UserSettings);
  rpc AddFriend(AddFriendRequest) returns (google.protobuf.Empty);
  rpc RemoveFriend(RemoveFriendRequest) returns (google.protobuf.Empty);
  rpc GetFriendRequestsSent(GetFriendRequestsSentRequest) returns (GetFriendRequestsSentResponse);
  rpc GetFriendRequestsReceived(GetFriendRequestsReceivedRequest) returns (GetFriendRequestsReceivedResponse);
  rpc GetFriends(GetFriendsRequest) returns (GetFriendsResponse);
  rpc SearchUsers(SearchUsersRequest) returns (SearchUsersResponse);
  rpc SearchUsersAutocomplete(SearchUsersAutocompleteRequest) returns (SearchUsersAutocompleteResponse);
  rpc GetProfileImage(GetProfileImageRequest) returns (GetProfileImageResponse);
  rpc SetProfileImage(SetProfileImageRequest) returns (google.protobuf.Empty);
}

message OAuthIdentifier {
  // The user's oauth provider. Currently Google is the only provider that's used.
  string oauth_provider = 1;

  // The oauth id of the user from the given provider.
  string oauth_id = 2;
}

// This method of creating users may seem strange. The reason we have a 'get-or-create' instead of
// a simpler 'get' rpc is because of the way that oauth login works. When someone logs in using
// oauth, the oauth provider doesn't know whether they already have an account here (i.e. a User
// exists that matches their oauth account). So at login time, we need to treat every user the same
// regardless of whether they've signed in before since we can't know that ahead of time. With the
// get-or-create pattern we provide all data we might need if a new User needs to be created, and
// ignore it if the User already exists.
message GetOrCreateUserRequest {
  // The user's oauth identifier.
  OAuthIdentifier oauth_identifier = 1;

  // Only used to create the user. If the user already exists, all fields here are ignored.
  User user = 2;
}

message GetUserRequest {
  oneof identifier {
    // The user's internal id.
    string user_id = 1;

    // The user's oauth identifier.
    OAuthIdentifier oauth_identifier = 2;
  }
}

message UpdateUserRequest {
  // The user to update.
  User user = 1;

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message GetUserSettingsRequest {
  // The user to fetch settings for.
  string user_id = 1;
}

message UpdateUserSettingsRequest {
  // The user settings to update.
  UserSettings user_settings = 1;

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message AddFriendRequest {
  string user_id = 1;
  string friend_id = 2;
}

message RemoveFriendRequest {
  string user_id = 1;
  string friend_id = 2;
}

message GetFriendRequestsSentRequest {
  string user_id = 1;

  // The maximum page size.
  int32 page_size = 2;

  // Optional page token returned from a previous rpc.
  string page_token = 3;
}

message GetFriendRequestsSentResponse {
  repeated User users = 1;

  // Can be passed to a subsequent request to retrieve the next page of items.
  string next_page_token = 2;

  // The total number of items in the list specified in the request.
  int64 total_size = 3;
}

message GetFriendRequestsReceivedRequest {
  string user_id = 1;

  // The maximum page size.
  int32 page_size = 2;

  // Optional page token returned from a previous rpc.
  string page_token = 3;
}

message GetFriendRequestsReceivedResponse {
  repeated User users = 1;

  // Can be passed to a subsequent request to retrieve the next page of items.
  string next_page_token = 2;

  // The total number of items in the list specified in the request.
  int64 total_size = 3;
}

message GetFriendsRequest {
  string user_id = 1;

  // The maximum page size.
  int32 page_size = 2;

  // Optional page token returned from a previous rpc.
  string page_token = 3;
}

message GetFriendsResponse {
  repeated User users = 1;

  // Can be passed to a subsequent request to retrieve the next page of items.
  string next_page_token = 2;

  // The total number of items in the list specified in the request.
  int64 total_size = 3;
}

message SearchUsersRequest {
  // The search query to suggest results from.
  string query = 1;

  // The maximum page size.
  int32 page_size = 2;
}

message SearchUsersResponse {
  // Search results.
  repeated User users = 1;
}

message SearchUsersAutocompleteRequest {
  // The search query to suggest results from.
  string query = 1;

  // The maximum page size.
  int32 page_size = 2;
}

message SearchUsersAutocompleteResponse {
  // List of autocomplete suggestions.
  // Each entry is guaranteed to contain
  // the original query.
  repeated string autocomplete_entry = 1;
}

message GetProfileImageRequest {
  string user_id = 1;
}

message GetProfileImageResponse {
  bytes image = 1;
}

message SetProfileImageRequest {
  string user_id = 1;
  bytes image = 2;
}