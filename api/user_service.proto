syntax = "proto3";

import "api/model.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/field_mask.proto";

// Enables creating and retrieval of users and user data.
//
// Resources:
// - User: Pretty much what you'd expect.
// - UserSettings: A user's account settings and preferences.
// - UserProfileImage: A user's profile picture.
//
// ( -- See resource proto documentation for more information. -- )
service UserService {
  // ( ---------------------- )
  // ( -- Standard Methods -- )
  // ( ---------------------- )

  // Returns a User.
  rpc GetUser (GetUserRequest) returns (User) {
    option (google.api.http) = {
      get: "/v1/{name=users/*}"
    };
    option (google.api.method_signature) = "name";
  };

  // Updates a User.
  rpc UpdateUser (UpdateUserRequest) returns (User) {
    option (google.api.http) = {
      patch: "/v1/{user.name=users/*}"
      body: "user"
    };
    option (google.api.method_signature) = "user,update_mask";
  };

  // Returns a User's settings.
  rpc GetUserSettings (GetUserSettingsRequest) returns (UserSettings) {
    option (google.api.http) = {
      get: "/v1/{name=users/*/settings}"
    };
    option (google.api.method_signature) = "name";
  };

  // Updates a User's settings.
  rpc UpdateUserSettings (UpdateUserSettingsRequest) returns (UserSettings) {
    option (google.api.http) = {
      patch: "/v1/{user_settings.name=users/*/settings}"
      body: "user_settings"
    };
    option (google.api.method_signature) = "user_settings,update_mask";
  };

  // Returns a User's profile image.
  rpc GetUserProfileImage (GetUserProfileImageRequest) returns (UserProfileImage) {
    option (google.api.http) = {
      get: "/v1/{name=users/*/profileImage}"
    };
    option (google.api.method_signature) = "name";
  };

  // Updates a User's profile image.
  rpc UpdateUserProfileImage (UpdateUserProfileImageRequest) returns (UserProfileImage) {
    option (google.api.http) = {
      patch: "/v1/{user_profile_image.name=users/*/profileImage}"
      body: "user_profile_image"
    };
    option (google.api.method_signature) = "user_profile_image,update_mask";
  };

  // ( -------------------- )
  // ( -- Custom Methods -- )
  // ( -------------------- )

  // Gets a user, or creates one if it does not exist.
  // This method of creating users may seem strange. The reason we have a 'get-or-create' instead of
  // a simpler 'create' rpc is because of the way that oauth login works. When someone logs in using
  // oauth, the oauth provider doesn't know whether they already have an account here (i.e. a User
  // exists that matches their oauth account). So at login time, we need to treat every user the same
  // regardless of whether they've signed in before since we can't know that ahead of time. With the
  // get-or-create pattern we provide all data we might need if a new User needs to be created, and
  // ignore it if the User already exists.
  rpc GetOrCreateUser (GetOrCreateUserRequest) returns (User);

  // Fetches multiple Users based off search query.
  rpc UserSearch (UserSearchRequest) returns (UserSearchResponse);

  // Fetches search suggestions that are used to provide autocomplete functionality.
  rpc AutocompleteUserSearch (AutocompleteUserSearchRequest) returns (AutocompleteUserSearchResponse);
}

// Used to identify a user through their oauth account.
message OAuthCredentials {
  // The user's oauth provider. Currently Google is the only provider that's used.
  string oauth_provider = 1;

  // The oauth id of the user from the given provider.
  string oauth_id = 2;
}

// Request message for GetUser.
message GetUserRequest {
  // The name of the user to retrieve.
  // Format: users/{user}
  string name = 1 [(google.api.field_behavior) = REQUIRED, (google.api.resource_reference) = {type: "api.crusty.cards/User"}];
}

// Request message for UpdateUser.
message UpdateUserRequest {
  // The user to update.
  User user = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request message for GetUserSettings.
message GetUserSettingsRequest {
  // The name of the user settings to retrieve.
  // Format: users/{user}/settings
  string name = 1 [(google.api.field_behavior) = REQUIRED, (google.api.resource_reference) = {type: "api.crusty.cards/UserSettings"}];
}

// Request message for UpdateUserSettings.
message UpdateUserSettingsRequest {
  // The user settings to update.
  UserSettings user_settings = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request message for GetUserProfileImage.
message GetUserProfileImageRequest {
  // The name of the profile image to retrieve.
  // Format: users/{user}/profileImage
  string name = 1 [(google.api.field_behavior) = REQUIRED, (google.api.resource_reference) = {type: "api.crusty.cards/UserProfileImage"}];
}

// Request message for UpdateUserProfileImage.
message UpdateUserProfileImageRequest {
  // The profile image to update.
  UserProfileImage user_profile_image = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request message for GetOrCreateUser.
message GetOrCreateUserRequest {
  // The user's oauth credentials.
  OAuthCredentials oauth_credentials = 1 [(google.api.field_behavior) = REQUIRED];

  // Used to create the user if it does not exist yet.
  User user = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request message for UserSearch.
message UserSearchRequest {
  // The search query to suggest results from.
  string query = 1 [(google.api.field_behavior) = REQUIRED];

  // The maximum page size.
  // If unspecified, at most 50 items will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];

  // Page token returned from a previous rpc.
  string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Response message for UserSearch.
message UserSearchResponse {
  // Search results.
  repeated User users = 1;

  // Opaque string. Can be passed to a subsequent
  // request to retrieve the next page of items.
  string next_page_token = 2;

  // The total number of items in the list specified in the request.
  int64 total_size = 3;
}

// Request message for AutocompleteUserSearch.
message AutocompleteUserSearchRequest {
  // The search query to suggest results from.
  string query = 1 [(google.api.field_behavior) = REQUIRED];

  // The maximum page size.
  // If unspecified, at most 50 items will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];

  // Page token returned from a previous rpc.
  string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Response message for AutocompleteUserSearch.
message AutocompleteUserSearchResponse {
  // List of autocomplete suggestions.
  // Each entry is guaranteed to contain
  // the original query.
  repeated string autocomplete_entries = 1;

  // Opaque string. Can be passed to a subsequent
  // request to retrieve the next page of items.
  string next_page_token = 2;

  // The total number of items in the list specified in the request.
  int64 total_size = 3;
}