syntax = "proto3";

package crusty_cards_api;

import "crusty_cards_api/model.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service GameService {
  rpc SearchGames (SearchGamesRequest) returns (SearchGamesResponse);
  rpc CreateGame (CreateGameRequest) returns (GameView);
  rpc StartGame (StartGameRequest) returns (GameView);
  rpc StopGame (StopGameRequest) returns (GameView);
  rpc JoinGame (JoinGameRequest) returns (GameView);
  rpc LeaveGame (LeaveGameRequest) returns (google.protobuf.Empty);
  rpc KickUser (KickUserRequest) returns (GameView);
  rpc BanUser (BanUserRequest) returns (GameView);
  rpc UnbanUser (UnbanUserRequest) returns (GameView);
  rpc PlayCards (PlayCardsRequest) returns (GameView);
  rpc UnplayCards (UnplayCardsRequest) returns (GameView);
  rpc VoteCard (VoteCardRequest) returns (GameView);
  rpc VoteStartNextRound (VoteStartNextRoundRequest) returns (GameView);
  rpc AddArtificialPlayer (AddArtificialPlayerRequest) returns (GameView);
  rpc RemoveArtificialPlayer (RemoveArtificialPlayerRequest) returns (GameView);
  rpc CreateChatMessage (CreateChatMessageRequest) returns (GameView);
  rpc GetGameView (GetGameViewRequest) returns (GameView);
  rpc ListWhiteCardTexts(ListWhiteCardTextsRequest) returns (ListWhiteCardTextsResponse);
}

// Returns all games that match the search criteria.
// Has no pagination, simply returns the entire list.
// Results are always ordered by create_time.
message SearchGamesRequest {
  // Filters games by name, i.e. games must contain the
  // exact text of the query in their name to match.
  string query = 1;

  // The minimum number of slots games must have available. Used to filter out games that are full
  // or nearly full. Value cannot be negative.
  int32 min_available_player_slots = 2 [(google.api.field_behavior) = OPTIONAL];

  enum GameStageFilter {
    // Default value. This value is unused.
    GAME_STAGE_FILTER_UNSPECIFIED = 0;

    // Bypass game stage filter.
    FILTER_NONE = 1;

    // Filter all non-running games.
    FILTER_STOPPED = 2;

    // Filter all running games.
    FILTER_RUNNING = 3;
  }

  GameStageFilter game_stage_filter = 3;
}

message SearchGamesResponse {
  repeated GameInfo games = 1;
}

message CreateGameRequest {
  // The name of the user creating the game.
  // This user will be the owner once the game is created.
  string user_name = 1 [(google.api.field_behavior) = REQUIRED];

  // Game configuration options.
  GameConfig game_config = 2 [(google.api.field_behavior) = REQUIRED];
}

message StartGameRequest {
  // The name of the user trying to start the game.
  // Must be the name of someone who owns the game that they are in.
  string user_name = 1;
}

message StopGameRequest {
  // The name of the user trying to stop the game.
  // Must be the name of someone who owns the game that they are in.
  string user_name = 1;
}

message JoinGameRequest {
  // The user who is joining a game.
  string user_name = 1;

  // The unique identifier of the game to join.
  string game_id = 2;
}

message LeaveGameRequest {
  // The user who is leaving a game.
  string user_name = 1;
}

message KickUserRequest {
  // The user who is kicking another user.
  string user_name = 1;

  // The user being kicked.
  string troll_user_name = 2;
}

message BanUserRequest {
  // The user who is banning another user.
  string user_name = 1;

  // The user being banned.
  string troll_user_name = 2;
}

message UnbanUserRequest {
  // The user who is unbanning another user.
  string user_name = 1;

  // The user being unbanned.
  string troll_user_name = 2;
}

message PlayCardsRequest {
  // The user who is playing cards for the current round.
  string user_name = 1;

  // The cards to play. All cards must be in the user's hand or the request will fail.
  // For each card in this list, if the `custom_white_card` property is present
  // then only `custom_white_card.name` is required and all other fields are ignored.
  // If the `default_white_card` property is present
  // then only `default_white_card.name` is required and all other fields are ignored.
  // If the `blank_white_card` property is present then `blank_white_card.id` and `blank_white_card.open_text` are required.
  // The `blank_white_card.open_text` field should contain user-specified open text from a blank white card.
  // The `blank_white_card` property is only allowed for games that have OPEN_TEXT behavior for blank white cards.
  repeated PlayableWhiteCard cards = 2;
}

message UnplayCardsRequest {
  // The user who is unplaying their cards for the current round.
  string user_name = 1;
}

message VoteCardRequest {
  string user_name = 1;

  // The 1-based index of which set of cards to vote for as the judge.
  int32 choice = 2;
}

message VoteStartNextRoundRequest {
  string user_name = 1;
}

message AddArtificialPlayerRequest {
  // The user who is adding an artificial player.
  string user_name = 1 [(google.api.field_behavior) = REQUIRED];

  // The display name of the new artificial player.
  // A name is chosen automatically if it isn't provided here.
  string display_name = 2 [(google.api.field_behavior) = OPTIONAL];
}

message RemoveArtificialPlayerRequest {
  // The user who is removing an artificial player.
  string user_name = 1 [(google.api.field_behavior) = REQUIRED];

  // The artificial player to remove.
  // If unspecified, removes the first artificial player, prioritizing queued players.
  string artificial_player_id = 2 [(google.api.field_behavior) = OPTIONAL];
}

message CreateChatMessageRequest {
  // The name of the user creating the chat message.
  string user_name = 1 [(google.api.field_behavior) = REQUIRED];

  // The chat message to create.
  ChatMessage chat_message = 2 [(google.api.field_behavior) = REQUIRED];
}

message GetGameViewRequest {
  string user_name = 1 [(google.api.field_behavior) = REQUIRED];
}

// Used to search among all cards that are in a game - including the dicard pile and all players' hands.
// The purpose of this rpc is for games that use DUPLICATE_TEXT blank white cards.
// Returned items are sorted alphabetically.
message ListWhiteCardTextsRequest {
  // The game to search within.
  string game_id = 1 [(google.api.field_behavior) = REQUIRED];

  // The maximum page size.
  // If unspecified, at most 50 items will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];

  // Page token returned from a previous rpc.
  string page_token = 3 [(google.api.field_behavior) = OPTIONAL];

  // Filter cards by their text. Right now this does not have any
  // special functionality described in https://google.aip.dev/160.
  // It is strictly an exact text filter.
  string filter = 4 [(google.api.field_behavior) = OPTIONAL];
}

message ListWhiteCardTextsResponse {
  // The text of each card.
  repeated string card_texts = 1;

  // Opaque string. Can be passed to a subsequent
  // request to retrieve the next page of items.
  string next_page_token = 2;

  // The total number of items in the list specified in the request.
  int64 total_size = 3;
}

message ChatMessage {
  // The user who sent the message.
  User user = 1 [(google.api.field_behavior) = OUTPUT_ONLY, (google.api.field_behavior) = IMMUTABLE];

  // The contents of the message. Cannot be blank.
  string text = 2 [(google.api.field_behavior) = REQUIRED];

  // When the message was created.
  google.protobuf.Timestamp create_time = 3 [(google.api.field_behavior) = OUTPUT_ONLY, (google.api.field_behavior) = IMMUTABLE];
}

message ArtificialUser {
  // A server-generated uuid.
  string id = 1;

  // The displayed name of the artificial user.
  // Since each artificial user has a unique id,
  // the name does not have to be unique.
  string display_name = 2;
}

// Represents a real user or an artificial player in a game.
message Player {
  oneof identifier {
    User user = 1;
    ArtificialUser artificial_user = 2;
  }

  // The number of rounds this player has won.
  int32 score = 3;

  // When the player was added to the game. For real users this is
  // when the JoinGame RPC is called. For artificial players
  // this is when the AddArtificialPlayer RPC is called.
  google.protobuf.Timestamp join_time = 4;
}

// Can be one of several different types of black cards.
// This proto is used during gameplay to represent any type of black card.
// The black card equivalent of the PlayableWhiteCard message.
message BlackCardInRound {
  oneof card {
    CustomBlackCard custom_black_card = 1;
    DefaultBlackCard default_black_card = 2;
  }
}

message BlankWhiteCard {
  // A server-generated uuid.
  string id = 1;

  // Text entered by the user (limited to 100 characters).
  // Always empty for cards in a player's hand and
  // always non-empty for cards that have been played.
  // Required when playing a blank white card using the PlayCards rpc.
  string open_text = 2;
}

// Can be one of several different types of white cards.
// This proto is used during gameplay to represent any type of white card.
// The white card equivalent of the BlackCardInRound message.
message PlayableWhiteCard {
  oneof card {
    CustomWhiteCard custom_white_card = 1;
    BlankWhiteCard blank_white_card = 2;
    DefaultWhiteCard default_white_card = 3;
  }
}

// Contains cards played by
// a single user for one round.
// See the description for GameView.white_played
// for details on how this is used
// and when certain fields are filled.
message WhiteCardsPlayed {
  // The player who played the cards.
  Player player = 1;

  // The text of the cards played by the user.
  // We're including only the card text to hide
  // whether it includes any blank white cards.
  // Since artificial players never draw blank
  // white cards, including full card protos
  // could give away that an answer belongs to
  // a real user if it contained blank white
  // cards. By including only the text, even
  // users with direct access to this api are
  // unable to tell where it came from.
  repeated string card_texts = 2;
}

message PastRound {
  // The black card that was used for the round.
  BlackCardInRound black_card = 1;

  // The white cards that were played for this round. Each entry includes the player who played the cards.
  repeated WhiteCardsPlayed white_played = 2;

  // The user who judged the round.
  User judge = 3;

  // The player who won the round.
  Player winner = 4;
}

// Game list view used when users are browsing games.
message GameInfo {
  // A server-generated uuid.
  string game_id = 1;

  // Game configuration options.
  GameConfig config = 2;

  // The number of players currently in the game.
  // This does not include artificial players.
  int32 player_count = 3;

  // The current game owner.
  User owner = 5;

  // Whether the game is currently in progress.
  bool is_running = 6;

  // When the underlying game was created.
  google.protobuf.Timestamp create_time = 7;

  // When the game was last active.
  // This only accounts for game-related actions, not users joining
  // or leaving the game or sending messages in the chat.
  google.protobuf.Timestamp last_activity_time = 8;
}

message GameView {
  // The unique id of the game.
  string game_id = 1;
  
  // The config that was used to create this game.
  GameConfig config = 2;

  // Represents what stage this game is currently in, which
  // determines what actions are allowed for certain players.
  enum Stage {
    // Default value. This value is unused.
    STAGE_UNSPECIFIED = 0;

    // Game is not running.
    NOT_RUNNING = 1;

    // Players (other than the judge) can play cards for the current round.
    PLAY_PHASE = 2;

    // The current judge can pick their favorite card(s).
    // Cards from the play phase are visible but anonymous.
    JUDGE_PHASE = 3;

    // Player scores are updated and players can view who played each card.
    ROUND_END_PHASE = 4;
  }
  
  // What stage the game is in. This determines what actions are available.
  Stage stage = 3;

  // The player's current hand.
  repeated PlayableWhiteCard hand = 4;

  // All real and artificial players that are currently playing.
  // Guaranteed to be ordered by join_time.
  repeated Player players = 5;

  // All real and artificial players that joined while the
  // game was running (any Stage other than NOT_RUNNING).
  // Guaranteed to be ordered by join_time.
  // These players will be automatically moved from queued_players to
  // players when StopGame is called (or if every user in the game
  // calls VoteStartNextRound).
  repeated Player queued_players = 6;

  // All users that have been banned from the game.
  // Always listed in the order they were banned.
  // These users are unable to join the game.
  repeated User banned_users = 7;

  // The current judge for the round.
  // This might be empty if the game stage is NOT_RUNNING
  // (if there is a previous judge to show from the past game
  // then it will be filled, otherwise it will be empty).
  // If the game is in any other stage then this is always filled.
  // When the game stage is PLAY_PHASE or JUDGE_PHASE
  // it represents the current judge, and the judge does not change
  // when the stage is changed from JUDGE_PHASE to ROUND_END_PHASE.
  // Instead, it changes when the game stage changes from ROUND_END_PHASE to PLAY_PHASE.
  // Whenever a game is started, a new random judge is selected.
  User judge = 8;

  // The current owner of the game.
  // The game creator is the initial
  // owner, but if the current owner
  // leaves then ownership is transferred
  // to the next user who has been
  // in the game the longest.
  User owner = 9;

  // The white cards played this round.
  // Data contained is dependent on the game stage.
  // ----------------------------------------------
  // When the game stage is PLAY_PHASE, each repeated value
  // represents who has played this round. The 'user' field
  // is filled for each value so that players know who has
  // played, but the 'cards' field is empty so cards remain
  // anonymous until after the judge phase. Values are
  // in no particular order.
  //
  // When the game stage is JUDGE_PHASE, this will contain
  // one value for each player that has played this round.
  // For each repeated value, the 'cards' property will be
  // filled but the 'user' property will be left empty and
  // the order of values randomized so users don't know who
  // submitted each card.
  //
  // When the game stage is ROUND_END_PHASE, this will
  // contain one value for every player that played in
  // the current round. For each repeated value, both
  // 'user' and 'cards' properties will be filled.
  // Values are in the same order as they were during
  // the judge phase.
  //
  // When the game stage is NOT_RUNNING, behavior is the same as ROUND_END_PHASE
  // except that the repeated field could contain no values. This happens if
  // the game was just created and there is no past round to show cards for.
  // Otherwise this will contain cards from the previous game
  // that just ended (or was stopped).
  repeated WhiteCardsPlayed white_played = 10;

  // The black card that's active for the current round.
  // This is empty if stage is NOT_RUNNING, otherwise
  // this will contain the current card.
  BlackCardInRound current_black_card = 11;

  // Contains the winner of the most recent game.
  // This is only filled when the stage is NOT_RUNNING
  // and there is a winner to display. There is not
  // always a winner to display, such as if the game
  // was just created or if it was stopped
  // before someone won.
  Player winner = 12;

  // Chat messages sent by players in the game.
  // Contains, at most, the 100 most recent messages.
  repeated ChatMessage chat_messages = 13;

  // A list of previous rounds from the current game.
  // This is cleared whenever the game is started/restarted.
  repeated PastRound past_rounds = 14;

  // When the game was created.
  google.protobuf.Timestamp create_time = 15;

  // When the game was last active.
  // This only accounts for game-related actions, not users joining
  // or leaving the game or sending messages in the chat.
  google.protobuf.Timestamp last_activity_time = 16;
}